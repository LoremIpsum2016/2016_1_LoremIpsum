var canvas,ctx,w, h, game = true;
var ball, platform, blocks;
var toLeft = true, toRight = true;
var rowHeight, row, col;

var BALL = function(x,y){
    this.x = x;
    this.y = y;

    this.color = "red";
    this.radius = 2.5;
    this.vx = 3;
    this.vy = -2;
}

var PLATFORM = function(x,y){
    this.x = x;
    this.y = y;

    this.color = "black";
    this.width =  50;
    this.height = 5;
    this.vx = 6;
}

var BLOCKS = function(width,height,rows,cols){
    this.rows = rows;
    this.cols = cols;
    this.width = width;
    this.height = height;
    this.padding = 2;

    this.obj;
}

window.onload = init;

document.addEventListener('keydown',function(event){
   if(event.keyCode == 37){
        toLeft = true;
       toRight = false;
   }
    else if(event.keyCode == 39){
       toLeft = false;
       toRight = true;
   }
    else if(event.keyCode == 40){
       toLeft = false;
       toRight = false;
   }
});

document.addEventListener('keyup',function(event){
    toLeft = false;
    toRight = false;
});



function init(){
    canvas = document.getElementById("canvas");
    w = canvas.width;
    h = canvas.height;
    ctx = canvas.getContext('2d');
    ball = new BALL(w/2,h/2 + 50);
    platform = new PLATFORM(w/2, h-10)
    platform.x-=platform.width/2;

    blocks = new BLOCKS((w/20)-2, 5, 6, 20)
    blocks.obj = [];
    for (var i =0; i<blocks.rows; ++i){
        blocks.obj[i] = [];
        for (var j =0; j<blocks.cols; ++j){
            blocks.obj[i][j] = 1;
        }
    }
    beginGame();
}

function beginGame(){
    if(game){
        ctx.clearRect(0,0,w,h);
        ball.x+=ball.vx;
        ball.y+=ball.vy;

        if((ball.x+ball.radius)+ball.vx>w || (ball.x-ball.radius)+ball.vx<0){
            ball.vx = -ball.vx;
        }
        if((ball.y - ball.radius)+ball.vy < 0 /*|| (ball.y + ball.radius)+ball.vy > h */){
            ball.vy = -ball.vy;
        }
        else if((ball.vy-ball.radius+ball.y) >= (h-platform.height-5) && (ball.y-ball.radius+ball.vy<h)){
            if(ball.x-ball.radius>=platform.x && ball.x-ball.radius<=(platform.x+platform.width)){
                ball.vy= - ball.vy;
                ball.vx = 10*(ball.x - (platform.x + platform.width/2))/platform.width;
            }
            else
            {
                game = false;
            }
        }
        if(toRight && platform.x+platform.width<w){
         platform.x+=platform.vx;
        }
        if(toLeft && platform.x>0){
            platform.x-=platform.vx;
        }



        rowHeight = blocks.height + blocks.padding;
        row = Math.floor(ball.y/(rowHeight));
        col = Math.floor(ball.x/(blocks.width + blocks.padding));
        if (ball.y < blocks.rows * rowHeight && row >= 0 && col > 0 && blocks.obj[row][col] === 1){
            blocks.obj[row][col] = 0;
            ball.vy = -ball.vy;
        }

        ctx.fillStyle = ball.color;
        ctx.beginPath();
        ctx.arc(ball.x, ball.y,ball.radius,0,2*Math.PI,true)
        ctx.closePath();
        ctx.fill();


        ctx.fillStyle = platform.color;
        ctx.beginPath();
        ctx.fillRect(platform.x, platform.y,platform.width,platform.height)
        ctx.closePath();

        ctx.fillStyle = "orange";
        ctx.strokeStyle = "black";

        for (var i =0; i<blocks.rows; ++i){
            for (var j =0; j<blocks.cols; ++j){
                if (blocks.obj[i][j] === 1){
                    ctx.beginPath();
                    ctx.fillRect(j * (blocks.width + blocks.padding),i * (blocks.height+blocks.padding), blocks.width, blocks.height)
                    ctx.strokeRect(j * (blocks.width + blocks.padding),i * (blocks.height+blocks.padding), blocks.width, blocks.height)
                    ctx.closePath();
                }
            }
        }

        window.webkitRequestAnimationFrame(beginGame);
    }
}